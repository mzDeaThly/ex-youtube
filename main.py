import os
from news_fetcher import get_latest_news, summarize_text
from video_creator import create_audio_from_text, download_pexels_video, create_final_video
from youtube_uploader import upload_video

CLIENT_SECRET_PATH = "/etc/secrets/client_secret.json"
DEFAULT_VIDEO_PATH = "default.mp4"  # fallback ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠

def prepare_client_secret():
    if not os.path.exists(CLIENT_SECRET_PATH):
        raise FileNotFoundError(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö client_secret.json ‡∏ó‡∏µ‡πà {CLIENT_SECRET_PATH}")
    print(f"üîê ‡πÉ‡∏ä‡πâ client_secret.json ‡∏à‡∏≤‡∏Å {CLIENT_SECRET_PATH}")

def process_single_video():
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠...")

    title, content = get_latest_news()
    if not title or not content:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏´‡∏°‡πà")
        return

    print(f"üì∞ ‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤: {title}")
    try:
        summary = summarize_text(content)
        print(f"üìù ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß: {summary}")
    except Exception as e:
        print(f"‚ùå ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        return

    if not summary or not summary.strip():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
        return

    try:
        audio_file = create_audio_from_text(summary)
        print(f"üîä ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à: {audio_file}")
    except Exception as e:
        print(f"‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        return

    try:
        keyword = title.split(" ")[0]
        video_file = download_pexels_video(keyword)
        print(f"üé¨ ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: {video_file}")
    except Exception as e:
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏≤‡∏Å Pexels: {e}")
        if os.path.exists(DEFAULT_VIDEO_PATH):
            video_file = DEFAULT_VIDEO_PATH
            print(f"üé¨ ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ fallback: {DEFAULT_VIDEO_PATH}")
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏°‡πâ fallback")
            return

    try:
        final_video_file = create_final_video(audio_file, video_file, title)
        print(f"‚úÖ ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏ü‡∏ô‡∏≠‡∏•: {final_video_file}")
    except Exception as e:
        print(f"‚ùå ‡∏ú‡∏™‡∏°‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        return

    try:
        upload_video(
            file=final_video_file,
            title=title,
            description=summary,
            tags=["‡∏Ç‡πà‡∏≤‡∏ß", "‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß", "‡∏Ç‡πà‡∏≤‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"],
            client_secret_path=CLIENT_SECRET_PATH
        )
    except Exception as e:
        print(f"‚ùå ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")

    # ‡∏•‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    for f in [audio_file, video_file, final_video_file]:
        if os.path.exists(f) and "default" not in f:
            os.remove(f)
            print(f"üóëÔ∏è ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå: {f}")

if __name__ == "__main__":
    prepare_client_secret()

    for i in range(5):
        print(f"\n--- ‚ñ∂Ô∏è ‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà {i+1}/5 ---")
        try:
            process_single_video()
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏Å: {e}")
