import os
import subprocess
import requests
from gtts import gTTS

PEXELS_API_KEY = os.environ.get('PEXELS_API_KEY', '')
BGM_FILE = "bgm.mp3"
FONT_PATH = "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf"  # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° OS ‡∏Ñ‡∏∏‡∏ì

def create_audio_from_text(text, filename="temp_audio.mp3"):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏≤‡∏Å‡∏¢‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏î‡πâ‡∏ß‡∏¢ gTTS"""
    tts = gTTS(text=text, lang='th')
    tts.save(filename)
    return filename

def create_default_video_if_missing(filename="default.mp4"):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡∏î‡∏≥ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠"""
    if os.path.exists(filename):
        print(f"‚úÖ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå default video: {filename}")
        return filename

    print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {filename} ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...")
    cmd = [
        "ffmpeg",
        "-f", "lavfi",
        "-i", "color=c=black:s=1080x1920:d=15",
        "-vf", "drawtext=text='‡∏Ç‡πà‡∏≤‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ':fontsize=64:fontcolor=white:x=(w-text_w)/2:y=(h-text_h)/2",
        "-c:v", "libx264",
        "-t", "15",
        "-pix_fmt", "yuv420p",
        filename
    ]
    subprocess.run(cmd, check=True)
    print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á default video ‡πÄ‡∏™‡∏£‡πá‡∏à: {filename}")
    return filename

def download_pexels_video(query, per_page=1):
    """‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á (1080x1920) ‡∏à‡∏≤‡∏Å Pexels API ‡∏û‡∏£‡πâ‡∏≠‡∏° fallback"""
    headers = {"Authorization": PEXELS_API_KEY}
    url = f"https://api.pexels.com/videos/search?query={query}&per_page={per_page}"
    response = requests.get(url, headers=headers)
    print(f"üì° Fetching query: {query}")
    print(f"üì° Status: {response.status_code}")

    if response.status_code == 200:
        data = response.json()
        videos = data.get('videos', [])
        # ‡∏´‡∏≤ video ‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á 1080x1920
        for vid in videos:
            for vf in vid.get('video_files', []):
                if vf['width'] == 1080 and vf['height'] == 1920:
                    video_url = vf['link']
                    video_path = "temp_video.mp4"
                    video_data = requests.get(video_url)
                    with open(video_path, 'wb') as f:
                        f.write(video_data.content)
                    return video_path

    print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á‡∏à‡∏≤‡∏Å Pexels ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö keyword: {query} ‚Üí ‡πÉ‡∏ä‡πâ default.mp4")
    return create_default_video_if_missing()

def create_final_video(audio_path, video_path, title_text, output_filename="final_video.mp4"):
    """‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° overlay subtitle ‡πÅ‡∏•‡∏∞ BGM"""
    # ‡πÉ‡∏™‡πà‡∏ã‡∏±‡∏ö‡πÑ‡∏ï‡πÄ‡∏ï‡∏¥‡πâ‡∏• (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß) ‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ ‡πÅ‡∏•‡∏∞ zoom in motion effect
    cmd = [
        "ffmpeg",
        "-y",
        "-i", video_path,
        "-i", audio_path,
        "-i", BGM_FILE,
        "-filter_complex",
        # zoom in slow, overlay text (subtitle), mix ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î + BGM ‡∏•‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á bgm ‡∏•‡∏á 20dB
        f"[0:v]zoompan=z='min(zoom+0.0005,1.05)':d=125,drawtext=fontfile={FONT_PATH}:text='{title_text}':fontcolor=white:fontsize=36:x=(w-text_w)/2:y=h-100:box=1:boxcolor=black@0.6:boxborderw=5[v];" +
        "[1:a]volume=1[a1];" +
        "[2:a]volume=0.2[a2];" +
        "[a1][a2]amix=inputs=2:duration=first:dropout_transition=3[a]",
        "-map", "[v]",
        "-map", "[a]",
        "-c:v", "libx264",
        "-c:a", "aac",
        "-shortest",
        "-pix_fmt", "yuv420p",
        "-s", "1080x1920",
        output_filename
    ]
    subprocess.run(cmd, check=True)
    return output_filename
